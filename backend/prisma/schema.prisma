// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Posts {
    id String @id @default(cuid())
    title String @db.VarChar(150)
    content String  @db.VarChar(1000)
    created DateTime @default(now())

    userId String
    user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

    tags PostTags[] 
    comments Comments[] 
    votes PostVotes[]
}
model Users {
    id String @id @default(cuid())
    username String @unique @db.VarChar(30)
    password String 
    email String    @unique
    created DateTime @default(now())
    
    profile Profiles?
    posts Posts[]
    comments Comments[]

    role String @default("user")
    roles Roles @relation( fields: [role], references: [name], onDelete: Cascade)

    postVotes PostVotes[]
    commentVotes CommentVotes[]
}

model Profiles {
    id String @id @default(cuid())
    avatarUrl String
    introduction String @db.VarChar(300)

    userId String @unique @map("profileUserId")
    user Users @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comments {
    id String @id @default(cuid())
    created DateTime @default(now())
    content String @db.VarChar(300)

    userId String
    user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

    postId String?
    post Posts? @relation(fields: [postId], references: [id], onDelete: Cascade)

    commentId String? @map("commentId")
    comment Comments? @relation("CommentOnComment",fields: [commentId], references: [id], onDelete: Cascade)
    comments Comments[] @relation("CommentOnComment")

    votes CommentVotes[]
}



model Tags {
    name String @id @db.VarChar(20)
    created DateTime @default(now())
    posts PostTags[]
}



model PostTags {
    postId  String 
    tagName  String
    post   Posts @relation( fields: [postId], references: [id] , onDelete: Cascade)
    tag    Tags @relation( fields: [tagName], references: [name], onDelete: Cascade)

    @@id([postId, tagName])
}

model PostVotes {
    created DateTime @default(now())
    value Boolean

    userId String
    user Users @relation( fields: [userId], references: [id],onDelete: Cascade)

    postId String
    post Posts @relation(fields: [postId], references: [id], onDelete: Cascade)

   @@id([userId, postId])
}

model CommentVotes {
    created DateTime @default(now())
    value Boolean

    userId String
    user Users @relation( fields: [userId], references: [id], onDelete: Cascade)

    commentId String
    comment Comments @relation(fields: [commentId], references: [id], onDelete: Cascade)

    @@id([userId, commentId])
   
}



enum PermissionActions {
    CREATE
    READ
    UPDATE
    DELETE
}

enum PermissionSubjects {
    POSTS
    COMMENTS
    SETTINGS
}

model Permissions {
    // id String @id @default(cuid())
    action PermissionActions
    subject PermissionSubjects

    roles RolePermissions[]
    @@id([action, subject])
}

enum PermissionTarget {
    OWN
    ALL
}

model Roles {
   
    name String @id
    permissions RolePermissions[]

    users Users[]
   
}

model RolePermissions {
    action PermissionActions
    subject PermissionSubjects
    target PermissionTarget

    roleName String
    role Roles @relation(fields:[roleName], references: [name], onDelete: Cascade)

    // permissionId String
    permission Permissions @relation(fields:[action,subject], references: [action,subject], onDelete: Cascade)
    
    @@id([roleName, action,subject])
}