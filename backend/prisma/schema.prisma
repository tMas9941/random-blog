// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Posts {
    id String @id @default(cuid())
    title String
    content String
    created DateTime @default(now())

    authorId String
    author Users @relation(fields: [authorId], references: [id], onDelete: Cascade)

    comments Comments[]
    posts PostTags[] 
    votes Votes[]
}
model Users {
    id String @id @default(cuid())
    username String @unique
    email String    @unique
    created DateTime @default(now())
    password String

    posts Posts[]
    comments Comments[]
    
}

model Comments {
    id String @id @default(cuid())
    created DateTime @default(now())
    content String

    postId String
    post Posts @relation(fields: [postId], references: [id], onDelete: Cascade)
    userId String
    user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

    votes Votes[]
}

model Tags {
    name String @id
    created DateTime @default(now())
    posts PostTags[]
}

model PostTags {
    postId  String 
    tagName  String
    post   Posts @relation( fields: [postId], references: [id] , onDelete: Cascade)
    tag    Tags @relation( fields: [tagName], references: [name], onDelete: Cascade)

    @@id([postId, tagName])
}

model Votes {
    id String @id @default(cuid())
    created DateTime @default(now())
    positive Boolean

    commentId String?
    votedComment Comments? @relation( fields: [commentId], references: [id])

    postId String?
    votedPost Posts? @relation( fields: [postId], references: [id])
}